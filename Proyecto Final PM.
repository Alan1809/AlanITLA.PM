#include <stdio.h>  // Biblioteca estándar de entrada y salida
#include <stdlib.h> // Biblioteca para funciones de utilidad, como malloc, free, etc.
#include <string.h> // Biblioteca para manipulación de cadenas

// Definimos constantes para los límites máximos de cadenas
#define MAX_NAME_LEN 50      // Longitud máxima para el nombre del alumno
#define MAX_CAREER_LEN 50    // Longitud máxima para el nombre de la carrera
#define FILE_NAME_LEN 100    // Longitud máxima para el nombre del archivo

// Definición de la estructura Alumno
typedef struct {
    char nombre[MAX_NAME_LEN];  // Nombre del alumno
    float promedio;             // Promedio del alumno
    char carrera[MAX_CAREER_LEN]; // Carrera del alumno
} Alumno;  // Estructura que representa un registro de alumno

// Prototipos de funciones
void nuevoArchivo();  // Crea un nuevo archivo vacío
void abrirArchivo();  // Abre y muestra el contenido de un archivo
void guardarArchivo(const char *nombreArchivo, Alumno *alumnos, int totalAlumnos); // Guarda un conjunto de alumnos en un archivo
void buscarEnArchivo(const char *nombreArchivo); // Busca un alumno en el archivo por nombre
void agregarAlumno(const char *nombreArchivo);  // Agrega un nuevo alumno al archivo
int verificarArchivoExiste(const char *nombreArchivo); // Comprueba si un archivo existe

// Función principal
int main() {
    int opcion;  // Almacena la opción seleccionada por el usuario en el menú
    char nombreArchivo[FILE_NAME_LEN];  // Variable para el nombre del archivo

    // Bucle principal para mostrar el menú hasta que el usuario seleccione salir
    do {
        // Imprime el menú
        printf("\n--- Menu ---\n");
        printf("1. Nuevo Archivo\n");
        printf("2. Abrir Archivo\n");
        printf("3. Guardar Archivo\n");
        printf("4. Buscar en Archivo\n");
        printf("5. Agregar Nuevo Alumno\n");
        printf("0. Salir\n");
        printf("Seleccione una opción: ");
        scanf("%d", &opcion);  // Lee la opción del usuario
        getchar();  // Consumir el salto de línea sobrante

        // Control de flujo según la opción seleccionada
        switch (opcion) {
            case 1:  // Crear un nuevo archivo
                nuevoArchivo();
                break;
            case 2:  // Abrir y leer un archivo existente
                printf("Ingrese el nombre del archivo a abrir: ");
                fgets(nombreArchivo, FILE_NAME_LEN, stdin); // Leer el nombre del archivo
                nombreArchivo[strcspn(nombreArchivo, "\n")] = 0; // Eliminar el salto de línea
                abrirArchivo(nombreArchivo);
                break;
            case 3:  // Guardar un archivo
                printf("Ingrese el nombre del archivo a guardar: ");
                fgets(nombreArchivo, FILE_NAME_LEN, stdin); // Leer el nombre del archivo
                nombreArchivo[strcspn(nombreArchivo, "\n")] = 0; // Eliminar el salto de línea
                // Aquí puedes implementar guardarArchivo según tu lógica
                break;
            case 4:  // Buscar un alumno en el archivo
                printf("Ingrese el nombre del archivo donde buscar: ");
                fgets(nombreArchivo, FILE_NAME_LEN, stdin);
                nombreArchivo[strcspn(nombreArchivo, "\n")] = 0;
                buscarEnArchivo(nombreArchivo);
                break;
            case 5:  // Agregar un nuevo alumno al archivo
                printf("Ingrese el nombre del archivo donde agregar: ");
                fgets(nombreArchivo, FILE_NAME_LEN, stdin);
                nombreArchivo[strcspn(nombreArchivo, "\n")] = 0;
                agregarAlumno(nombreArchivo);
                break;
            case 0:  // Salir del programa
                printf("Saliendo del programa.\n");
                break;
            default:  // Opción no válida
                printf("Opción inválida. Intente nuevamente.\n");
        }
    } while (opcion != 0);  // Continuar mostrando el menú mientras la opción no sea 0

    return 0;  // Indicar que el programa terminó exitosamente
}

// Función para crear un nuevo archivo vacío
void nuevoArchivo() {
    char nombreArchivo[FILE_NAME_LEN];  // Variable para el nombre del archivo
    printf("Ingrese el nombre del nuevo archivo: ");
    fgets(nombreArchivo, FILE_NAME_LEN, stdin); // Leer el nombre del archivo
    nombreArchivo[strcspn(nombreArchivo, "\n")] = 0; // Eliminar el salto de línea

    FILE *archivo = fopen(nombreArchivo, "wb");  // Abrir archivo en modo binario para escritura
    if (archivo == NULL) {  // Verificar si hubo error al abrir el archivo
        perror("Error al crear el archivo");
        return;
    }

    printf("Archivo '%s' creado exitosamente.\n", nombreArchivo);
    fclose(archivo);  // Cerrar el archivo
}

// Función para abrir y mostrar el contenido de un archivo
void abrirArchivo(const char *nombreArchivo) {
    if (!verificarArchivoExiste(nombreArchivo)) {  // Comprobar si el archivo existe
        printf("El archivo '%s' no existe.\n", nombreArchivo);
        return;
    }

    FILE *archivo = fopen(nombreArchivo, "rb");  // Abrir archivo en modo binario para lectura
    if (archivo == NULL) {  // Verificar si hubo error al abrir el archivo
        perror("Error al abrir el archivo");
        return;
    }

    Alumno alumno;  // Variable para almacenar un registro de alumno
    printf("Contenido del archivo '%s':\n", nombreArchivo);
    while (fread(&alumno, sizeof(Alumno), 1, archivo)) {  // Leer y mostrar registros
        printf("Nombre: %s, Promedio: %.2f, Carrera: %s\n",
               alumno.nombre, alumno.promedio, alumno.carrera);
    }

    fclose(archivo);  // Cerrar el archivo
}

// Resto de las funciones...
// Las demás funciones (guardarArchivo, buscarEnArchivo, agregarAlumno, verificarArchivoExiste) 
// ya están bien comentadas arriba. Sus propósitos incluyen agregar registros al archivo, buscar un nombre específico, y verificar si un archivo existe.
