#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Definir la estructura Alumno para almacenar los datos del estudiante
typedef struct {
    char nombre[100];   // Nombre del alumno
    float promedio;     // Promedio del alumno
    char carrera[100];  // Carrera del alumno
} Alumno;

// Función para verificar si un archivo existe
bool archivoExiste(const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "r"); // Intentamos abrir el archivo en modo lectura
    if (archivo) {
        fclose(archivo); // Si el archivo se abre correctamente, lo cerramos
        return true;     // El archivo existe
    }
    return false;        // El archivo no existe
}

// Función para escribir un registro Alumno en el archivo
void escribirAlumno(FILE *archivo, Alumno alumno) {
    fwrite(&alumno, sizeof(Alumno), 1, archivo); // Escribir la estructura Alumno en el archivo
}

// Función para leer un registro Alumno del archivo
void leerAlumno(FILE *archivo, Alumno *alumno) {
    fread(alumno, sizeof(Alumno), 1, archivo); // Leer un registro Alumno del archivo
}

// Función para buscar un alumno por nombre y mostrar su renglón
void buscarAlumno(FILE *archivo, const char *nombreBuscar) {
    Alumno alumno;
    fseek(archivo, 0, SEEK_SET); // Reiniciar el puntero al inicio del archivo
    int encontrado = 0, renglon = 1; // `renglon` lleva la cuenta de la posición en el archivo

    while (fread(&alumno, sizeof(Alumno), 1, archivo) == 1) { // Leer cada registro
        if (strstr(alumno.nombre, nombreBuscar) != NULL) { // Buscar coincidencia en el nombre
            printf("Renglón %d: %s | Promedio: %.2f | Carrera: %s\n", 
                   renglon, alumno.nombre, alumno.promedio, alumno.carrera);
            encontrado = 1;
        }
        renglon++; // Incrementar el contador de renglón
    }
    if (!encontrado) {
        printf("No se encontró ningún alumno con ese nombre.\n");
    }
}

// Función para mostrar el menú principal
void mostrarMenu() {
    printf("\n--- Sistema de Gestión de Alumnos ---\n");
    printf("1. Crear un archivo nuevo\n");
    printf("2. Abrir un archivo existente\n");
    printf("3. Guardar y cerrar archivo\n");
    printf("4. Buscar alumno por nombre\n");
    printf("5. Agregar nuevo registro\n");
    printf("6. Salir\n");
    printf("Seleccione una opción: ");
}

// Función principal
int main() {
    FILE *archivo = NULL;        // Puntero al archivo actual
    char nombreArchivo[100];     // Nombre del archivo
    Alumno alumno;               // Variable para almacenar datos del alumno
    int opcion;                  // Variable para la opción del menú
    char nombreBuscar[100];      // Nombre a buscar en el archivo

    while (1) { // Ciclo infinito para manejar el menú
        mostrarMenu();           // Mostrar el menú principal
        scanf("%d", &opcion);    // Leer la opción seleccionada por el usuario
        getchar();               // Limpiar el buffer del teclado

        switch (opcion) {
            case 1: // Crear un archivo nuevo
                printf("Ingrese el nombre del archivo nuevo: ");
                scanf("%s", nombreArchivo); // Leer el nombre del archivo
                archivo = fopen(nombreArchivo, "wb"); // Crear el archivo en modo binario escritura
                if (archivo == NULL) {
                    printf("Error al crear el archivo.\n");
                } else {
                    printf("Archivo '%s' creado exitosamente.\n", nombreArchivo);
                }
                break;

            case 2: // Abrir un archivo existente
                printf("Ingrese el nombre del archivo a abrir: ");
                scanf("%s", nombreArchivo); // Leer el nombre del archivo
                if (archivoExiste(nombreArchivo)) {
                    archivo = fopen(nombreArchivo, "rb+"); // Abrir archivo en lectura/escritura
                    if (archivo == NULL) {
                        printf("No se pudo abrir el archivo.\n");
                    } else {
                        printf("Archivo '%s' abierto exitosamente.\n", nombreArchivo);
                    }
                } else {
                    printf("El archivo no existe.\n");
                }
                break;

            case 3: // Guardar y cerrar archivo
                if (archivo != NULL) {
                    fclose(archivo); // Cerrar el archivo abierto
                    archivo = NULL; // Liberar el puntero
                    printf("Archivo guardado correctamente.\n");
                } else {
                    printf("No hay archivo abierto para guardar.\n");
                }
                break;

            case 4: // Buscar alumno por nombre
                if (archivo != NULL) {
                    printf("Ingrese el nombre a buscar: ");
                    fgets(nombreBuscar, sizeof(nombreBuscar), stdin); // Leer nombre de búsqueda
                    nombreBuscar[strcspn(nombreBuscar, "\n")] = 0;   // Eliminar salto de línea
                    buscarAlumno(archivo, nombreBuscar);             // Buscar en el archivo
                } else {
                    printf("No hay archivo abierto.\n");
                }
                break;

            case 5: // Agregar un nuevo registro
                if (archivo != NULL) {
                    printf("Ingrese el nombre del alumno: ");
                    fgets(alumno.nombre, sizeof(alumno.nombre), stdin); // Leer nombre del alumno
                    alumno.nombre[strcspn(alumno.nombre, "\n")] = 0;    // Eliminar salto de línea

                    printf("Ingrese el promedio del alumno: ");
                    scanf("%f", &alumno.promedio);                      // Leer promedio
                    getchar(); // Limpiar buffer

                    printf("Ingrese la carrera del alumno: ");
                    fgets(alumno.carrera, sizeof(alumno.carrera), stdin); // Leer carrera del alumno
                    alumno.carrera[strcspn(alumno.carrera, "\n")] = 0;    // Eliminar salto de línea

                    escribirAlumno(archivo, alumno); // Escribir el registro en el archivo
                    printf("Alumno agregado correctamente.\n");
                } else {
                    printf("No hay archivo abierto para agregar registros.\n");
                }
                break;

            case 6: // Salir
                if (archivo != NULL) {
                    fclose(archivo); // Cerrar el archivo abierto si existe
                }
                printf("Saliendo del programa...\n");
                return 0; // Finalizar el programa

            default: // Opción no válida
                printf("Opción no válida. Intente nuevamente.\n");
        }
    }
    return 0;
}
