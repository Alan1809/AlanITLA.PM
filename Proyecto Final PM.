#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Definimos la estructura Alumno
typedef struct {
    char nombre[100];   // Nombre del alumno
    float promedio;     // Promedio del alumno
    char carrera[100];  // Carrera del alumno
} Alumno;

// Función para verificar si un archivo existe
bool archivoExiste(const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "r"); // Intentamos abrir el archivo en modo lectura
    if (archivo) {
        fclose(archivo); // Si el archivo existe, lo cerramos
        return true;
    }
    return false;
}

// Función para crear un archivo nuevo
void crearNuevoArchivo(const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "wb"); // Abrimos el archivo en modo escritura binaria
    if (archivo == NULL) {
        printf("Error: No se pudo crear el archivo '%s'.\n", nombreArchivo);
        return;
    }
    printf("Archivo '%s' creado exitosamente.\n", nombreArchivo);
    fclose(archivo); // Cerramos el archivo
}

// Función para agregar un nuevo registro al archivo
void agregarRegistro(const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "ab"); // Abrimos el archivo en modo agregar
    if (archivo == NULL) {
        printf("Error: No se pudo abrir el archivo '%s' para agregar registros.\n", nombreArchivo);
        return;
    }

    Alumno alumno;
    // Solicitar los datos del alumno
    printf("Ingrese el nombre del alumno: ");
    fgets(alumno.nombre, sizeof(alumno.nombre), stdin);
    alumno.nombre[strcspn(alumno.nombre, "\n")] = 0; // Eliminar el salto de línea al final

    printf("Ingrese el promedio del alumno (0.0 - 10.0): ");
    while (scanf("%f", &alumno.promedio) != 1 || alumno.promedio < 0.0 || alumno.promedio > 10.0) {
        printf("Error: Ingrese un promedio válido entre 0.0 y 10.0: ");
        while (getchar() != '\n'); // Limpiar el buffer
    }
    getchar(); // Limpiar el buffer después del promedio

    printf("Ingrese la carrera del alumno: ");
    fgets(alumno.carrera, sizeof(alumno.carrera), stdin);
    alumno.carrera[strcspn(alumno.carrera, "\n")] = 0; // Eliminar el salto de línea

    // Escribir el registro en el archivo
    fwrite(&alumno, sizeof(Alumno), 1, archivo);
    fclose(archivo); // Cerramos el archivo
    printf("Registro agregado correctamente.\n");
}

// Función para buscar un alumno por nombre
void buscarAlumno(const char *nombreArchivo, const char *nombreBuscar) {
    FILE *archivo = fopen(nombreArchivo, "rb"); // Abrimos el archivo en modo lectura
    if (archivo == NULL) {
        printf("Error: No se pudo abrir el archivo '%s' para buscar registros.\n", nombreArchivo);
        return;
    }

    Alumno alumno;
    bool encontrado = false;
    int renglon = 1;

    printf("\n--- Resultados de la búsqueda para '%s' ---\n", nombreBuscar);
    // Leer todos los registros en el archivo
    while (fread(&alumno, sizeof(Alumno), 1, archivo) == 1) {
        if (strstr(alumno.nombre, nombreBuscar) != NULL) { // Buscar coincidencias
            printf("Renglón %d: %s | Promedio: %.2f | Carrera: %s\n",
                   renglon, alumno.nombre, alumno.promedio, alumno.carrera);
            encontrado = true;
        }
        renglon++;
    }

    if (!encontrado) {
        printf("No se encontraron coincidencias para '%s'.\n", nombreBuscar);
    }

    fclose(archivo); // Cerramos el archivo
}

// Función para mostrar todo el contenido del archivo
void mostrarArchivo(const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "rb"); // Abrimos el archivo en modo lectura
    if (archivo == NULL) {
        printf("Error: No se pudo abrir el archivo '%s'.\n", nombreArchivo);
        return;
    }

    Alumno alumno;
    int renglon = 1;

    printf("\n--- Contenido del Archivo '%s' ---\n", nombreArchivo);
    // Leer cada registro del archivo
    while (fread(&alumno, sizeof(Alumno), 1, archivo) == 1) {
        printf("Renglón %d: %s | Promedio: %.2f | Carrera: %s\n",
               renglon, alumno.nombre, alumno.promedio, alumno.carrera);
        renglon++;
    }

    fclose(archivo); // Cerramos el archivo
}

// Mostrar menú de opciones
void mostrarMenu() {
    printf("\n--- Sistema de Gestión de Alumnos ---\n");
    printf("1. Crear un archivo nuevo\n");
    printf("2. Abrir un archivo existente\n");
    printf("3. Agregar un nuevo registro\n");
    printf("4. Buscar un alumno por nombre\n");
    printf("5. Mostrar contenido del archivo\n");
    printf("6. Salir\n");
    printf("Seleccione una opción: ");
}

// Función principal
int main() {
    char nombreArchivo[100] = ""; // Nombre del archivo actual
    int opcion;                   // Opción del menú
    char nombreBuscar[100];       // Nombre para buscar en el archivo

    while (true) {
        mostrarMenu();
        if (scanf("%d", &opcion) != 1) { // Validar entrada numérica
            printf("Error: Ingrese una opción válida.\n");
            while (getchar() != '\n'); // Limpiar el buffer
            continue;
        }
        getchar(); // Limpiar el buffer después de leer la opción

        switch (opcion) {
            case 1: // Crear un archivo nuevo
                printf("Ingrese el nombre del archivo a crear: ");
                scanf("%s", nombreArchivo);
                getchar(); // Limpiar el buffer
                crearNuevoArchivo(nombreArchivo);
                break;

            case 2: // Abrir un archivo existente
                printf("Ingrese el nombre del archivo a abrir: ");
                scanf("%s", nombreArchivo);
                getchar(); // Limpiar el buffer
                if (archivoExiste(nombreArchivo)) {
                    printf("Archivo '%s' abierto correctamente.\n", nombreArchivo);
                } else {
                    printf("Error: El archivo '%s' no existe.\n", nombreArchivo);
                }
                break;

            case 3: // Agregar un nuevo registro
                if (archivoExiste(nombreArchivo)) {
                    agregarRegistro(nombreArchivo);
                } else {
                    printf("Error: Debe crear o abrir un archivo primero.\n");
                }
                break;

            case 4: // Buscar un alumno por nombre
                if (archivoExiste(nombreArchivo)) {
                    printf("Ingrese el nombre del alumno a buscar: ");
                    fgets(nombreBuscar, sizeof(nombreBuscar), stdin);
                    nombreBuscar[strcspn(nombreBuscar, "\n")] = 0; // Eliminar salto de línea
                    buscarAlumno(nombreArchivo, nombreBuscar);
                } else {
                    printf("Error: Debe crear o abrir un archivo primero.\n");
                }
                break;

            case 5: // Mostrar contenido del archivo
                if (archivoExiste(nombreArchivo)) {
                    mostrarArchivo(nombreArchivo);
                } else {
                    printf("Error: Debe crear o abrir un archivo primero.\n");
                }
                break;

            case 6: // Salir
                printf("Saliendo del programa...\n");
                return 0;

            default:
                printf("Error: Opción inválida. Intente nuevamente.\n");
        }
    }
}
