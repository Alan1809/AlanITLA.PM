#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOMBRE 50
#define MAX_CARRERA 50
#define MAX_ALUMNOS 100

// Estructura para representar a un alumno
// Esta estructura contiene los datos de un alumno: nombre, promedio y carrera
typedef struct {
    char nombre[MAX_NOMBRE];  // Nombre del alumno (máximo 50 caracteres)
    float promedio;           // Promedio del alumno
    char carrera[MAX_CARRERA]; // Carrera del alumno (máximo 50 caracteres)
} Alumno;

// Función para verificar si un archivo existe
// Recibe el nombre del archivo y devuelve 1 si existe, 0 si no existe
int archivoExiste(const char *nombreArchivo) {
    FILE *archivo = fopen(nombreArchivo, "r");  // Intenta abrir el archivo en modo lectura
    if (archivo != NULL) {  // Si el archivo se abre correctamente
        fclose(archivo);  // Cierra el archivo
        return 1;  // El archivo existe
    }
    return 0;  // El archivo no existe
}

// Función para buscar un nombre en el archivo
// Recibe un puntero al archivo y el nombre que se desea buscar
// Devuelve el número de renglón donde se encuentra el nombre o -1 si no se encuentra
int buscarNombre(FILE *archivo, const char *nombreBuscado) {
    Alumno alumno;  // Variable para almacenar un alumno leído del archivo
    int renglon = 0;  // Contador para llevar la cuenta de los renglones leídos

    // Leer el archivo de forma secuencial
    while (fread(&alumno, sizeof(Alumno), 1, archivo)) {
        renglon++;  // Incrementar el contador de renglones
        if (strcmp(alumno.nombre, nombreBuscado) == 0) {  // Compara el nombre con el buscado
            return renglon;  // Si coinciden, retorna el renglón donde se encontró
        }
    }
    return -1;  // Si no se encontró el nombre, retorna -1
}

// Función para guardar el archivo
// Recibe el nombre del archivo, un arreglo de alumnos y el número de alumnos
// Guarda los alumnos en el archivo binario
void guardarArchivo(const char *nombreArchivo, Alumno alumnos[], int numAlumnos) {
    FILE *archivo = fopen(nombreArchivo, "wb");  // Abre el archivo en modo escritura binaria
    if (archivo == NULL) {  // Si no se pudo abrir el archivo
        printf("No se pudo abrir el archivo para guardar.\n");
        return;
    }
    fwrite(alumnos, sizeof(Alumno), numAlumnos, archivo);  // Escribe los datos de los alumnos en el archivo
    fclose(archivo);  // Cierra el archivo
    printf("Archivo guardado correctamente.\n");
}

// Función para cargar un archivo
// Recibe el nombre del archivo y un arreglo de alumnos
// Carga los alumnos desde el archivo binario
int cargarArchivo(const char *nombreArchivo, Alumno alumnos[]) {
    FILE *archivo = fopen(nombreArchivo, "rb");  // Abre el archivo en modo lectura binaria
    if (archivo == NULL) {  // Si no se pudo abrir el archivo
        printf("No se pudo abrir el archivo.\n");
        return 0;
    }
    int i = 0;  // Contador para el número de alumnos leídos
    // Leer los datos de los alumnos desde el archivo
    while (fread(&alumnos[i], sizeof(Alumno), 1, archivo)) {
        i++;
    }
    fclose(archivo);  // Cierra el archivo
    return i;  // Devuelve el número de alumnos leídos
}

// Función para mostrar el menú de opciones
// Muestra las opciones que el usuario puede seleccionar
void mostrarMenu() {
    printf("\nMenu de opciones:\n");
    printf("1. Nuevo Archivo\n");
    printf("2. Abrir Archivo\n");
    printf("3. Guardar Archivo\n");
    printf("4. Buscar Alumno\n");
    printf("5. Agregar Nuevo Alumno\n");
    printf("6. Salir\n");
    printf("Selecciona una opcion: ");
}

// Función para agregar un nuevo alumno al arreglo
// Recibe el arreglo de alumnos y un puntero al contador de alumnos
void agregarAlumno(Alumno alumnos[], int *numAlumnos) {
    Alumno nuevoAlumno;  // Variable para almacenar el nuevo alumno
    printf("Ingresa el nombre del alumno: ");
    getchar();  // Consume el salto de línea que queda de la entrada anterior
    fgets(nuevoAlumno.nombre, MAX_NOMBRE, stdin);  // Lee el nombre del alumno
    nuevoAlumno.nombre[strcspn(nuevoAlumno.nombre, "\n")] = 0;  // Elimina el salto de línea al final del nombre

    printf("Ingresa el promedio del alumno: ");
    scanf("%f", &nuevoAlumno.promedio);  // Lee el promedio

    printf("Ingresa la carrera del alumno: ");
    getchar();  // Consume el salto de línea que queda de la entrada anterior
    fgets(nuevoAlumno.carrera, MAX_CARRERA, stdin);  // Lee la carrera
    nuevoAlumno.carrera[strcspn(nuevoAlumno.carrera, "\n")] = 0;  // Elimina el salto de línea al final de la carrera

    // Añade el nuevo alumno al arreglo
    alumnos[*numAlumnos] = nuevoAlumno;
    (*numAlumnos)++;  // Incrementa el contador de alumnos
    printf("Alumno agregado correctamente.\n");
}

int main() {
    Alumno alumnos[MAX_ALUMNOS];  // Arreglo para almacenar hasta 100 alumnos
    int numAlumnos = 0;  // Contador de alumnos en el sistema
    char nombreArchivo[MAX_NOMBRE];  // Variable para almacenar el nombre del archivo
    int opcion;  // Variable para almacenar la opción seleccionada en el menú
    
    while (1) {  // Bucle infinito hasta que el usuario elija salir
        mostrarMenu();  // Muestra el menú de opciones
        scanf("%d", &opcion);  // Lee la opción seleccionada
        
        switch (opcion) {  // Ejecuta la acción correspondiente según la opción seleccionada
            case 1:  // Nuevo archivo
                printf("Ingrese el nombre del nuevo archivo: ");
                getchar();  // Consume el salto de línea
                fgets(nombreArchivo, MAX_NOMBRE, stdin);  // Lee el nombre del archivo
                nombreArchivo[strcspn(nombreArchivo, "\n")] = 0;  // Elimina el salto de línea
                numAlumnos = 0;  // Reinicia el contador de alumnos
                printf("Nuevo archivo creado: %s\n", nombreArchivo);
                break;
                
            case 2:  // Abrir archivo
                printf("Ingrese el nombre del archivo a abrir: ");
                getchar();  // Consume el salto de línea
                fgets(nombreArchivo, MAX_NOMBRE, stdin);  // Lee el nombre del archivo
                nombreArchivo[strcspn(nombreArchivo, "\n")] = 0;  // Elimina el salto de línea
                
                // Verifica si el archivo existe y carga los datos
                if (archivoExiste(nombreArchivo)) {
                    numAlumnos = cargarArchivo(nombreArchivo, alumnos);  // Carga el archivo
                    printf("Archivo cargado correctamente. %d alumnos leidos.\n", numAlumnos);
                } else {
                    printf("El archivo no existe.\n");  // Si el archivo no existe
                }
                break;
                
            case 3:  // Guardar archivo
                if (numAlumnos > 0) {  // Verifica si hay alumnos para guardar
                    printf("Ingrese el nombre del archivo para guardar: ");
                    getchar();  // Consume el salto de línea
                    fgets(nombreArchivo, MAX_NOMBRE, stdin);  // Lee el nombre del archivo
                    nombreArchivo[strcspn(nombreArchivo, "\n")] = 0;  // Elimina el salto de línea
                    guardarArchivo(nombreArchivo, alumnos, numAlumnos);  // Guarda el archivo
                } else {
                    printf("No hay alumnos para guardar.\n");  // Si no hay alumnos
                }
                break;
                
            case 4:  // Buscar alumno
                if (numAlumnos > 0) {  // Verifica si hay alumnos para buscar
                    char nombreBuscado[MAX_NOMBRE];  // Variable para almacenar el nombre a buscar
                    printf("Ingresa el nombre del alumno a buscar: ");
                    getchar();  // Consume el salto de línea
                    fgets(nombreBuscado, MAX_NOMBRE, stdin);  // Lee el nombre a buscar
                    nombreBuscado[strcspn(nombreBuscado, "\n")] = 0;  // Elimina el salto de línea

                    // Abre el archivo y busca el nombre
                    FILE *archivo = fopen(nombreArchivo, "rb");
                    if (archivo == NULL) {
                        printf("No se pudo abrir el archivo.\n");
                    } else {
                        int renglon = buscarNombre(archivo, nombreBuscado);  // Busca el nombre
                        if (renglon == -1) {
                            printf("Alumno no encontrado.\n");  // Si no se encuentra
                        } else {
                            printf("Alumno encontrado en el renglón: %d\n", renglon);  // Si se encuentra
                        }
                        fclose(archivo);  // Cierra el archivo
                    }
                } else {
                    printf("No hay alumnos para buscar.\n");  // Si no hay alumnos
                }
                break;
                
            case 5:  // Agregar nuevo alumno
                agregarAlumno(alumnos, &numAlumnos);  // Llama a la función para agregar alumno
                break;
                
            case 6:  // Salir
                printf("Saliendo del programa...\n");
                return 0;  // Sale del programa
                
            default:
                printf("Opción inválida, intenta de nuevo.\n");  // Si la opción es inválida
        }
    }
    
    return 0;  // Fin del programa
}
