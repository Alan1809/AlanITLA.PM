#include <stdio.h>
#include <stdlib.h>

// Evita padding en las estructuras para que coincidan exactamente con los encabezados BMP
#pragma pack(push, 1)
typedef struct {
    unsigned char  bfType[2];  // Tipo de archivo, debe ser "BM"
    unsigned int   bfSize;     // Tamaño total del archivo en bytes
    unsigned short bfReserved1;
    unsigned short bfReserved2;
    unsigned int   bfOffBits;  // Offset (posición) donde comienzan los datos de píxeles
} BITMAPFILEHEADER;

typedef struct {
    unsigned int   biSize;         // Tamaño de este encabezado
    int            biWidth;        // Ancho de la imagen en píxeles
    int            biHeight;       // Altura de la imagen en píxeles
    unsigned short biPlanes;       // Siempre 1 para BMP
    unsigned short biBitCount;     // Bits por píxel (24 para imágenes RGB)
    unsigned int   biCompression;  // Método de compresión (0 = sin compresión)
    unsigned int   biSizeImage;    // Tamaño en bytes de los datos de imagen
    int            biXPelsPerMeter;// Resolución horizontal (píxeles por metro)
    int            biYPelsPerMeter;// Resolución vertical (píxeles por metro)
    unsigned int   biClrUsed;      // Número de colores usados (0 = todos)
    unsigned int   biClrImportant; // Número de colores importantes (0 = todos)
} BITMAPINFOHEADER;
#pragma pack(pop)

// Convierte un píxel BGR a un valor en escala de grises
unsigned char convertirAGris(unsigned char b, unsigned char g, unsigned char r) {
    return (unsigned char)(0.3 * r + 0.59 * g + 0.11 * b); // Fórmula estándar de luminancia
}

// Convierte una imagen BMP de 24 bits a escala de grises
void convertirBMPBlancoNegro(const char *input_filename, const char *output_filename) {
    // Abrir archivo BMP de entrada
    FILE *input_file = fopen(input_filename, "rb");
    if (input_file == NULL) {
        fprintf(stderr, "Error: No se puede abrir el archivo %s\n", input_filename);
        return;
    }

    // Leer los encabezados del archivo BMP
    BITMAPFILEHEADER fileHeader;
    fread(&fileHeader, sizeof(BITMAPFILEHEADER), 1, input_file);

    BITMAPINFOHEADER infoHeader;
    fread(&infoHeader, sizeof(BITMAPINFOHEADER), 1, input_file);

    // Verificar si es un archivo BMP válido de 24 bits
    if (fileHeader.bfType[0] != 'B' || fileHeader.bfType[1] != 'M' || infoHeader.biBitCount != 24) {
        fprintf(stderr, "Error: El archivo no es un BMP de 24 bits\n");
        fclose(input_file);
        return;
    }

    // Crear archivo BMP de salida
    FILE *output_file = fopen(output_filename, "wb");
    if (output_file == NULL) {
        fprintf(stderr, "Error: No se puede crear el archivo %s\n", output_filename);
        fclose(input_file);
        return;
    }

    // Escribir encabezados en el archivo de salida
    fwrite(&fileHeader, sizeof(BITMAPFILEHEADER), 1, output_file);
    fwrite(&infoHeader, sizeof(BITMAPINFOHEADER), 1, output_file);

    // Calcular el padding de cada fila
    int padding = (4 - (infoHeader.biWidth * 3) % 4) % 4;

    // Procesar cada fila de píxeles
    for (int i = 0; i < infoHeader.biHeight; i++) {
        for (int j = 0; j < infoHeader.biWidth; j++) {
            unsigned char bgr[3]; // Buffer para almacenar un píxel en formato BGR
            fread(bgr, 3, 1, input_file);

            // Convertir el píxel a escala de grises
            unsigned char gris = convertirAGris(bgr[0], bgr[1], bgr[2]);

            // Escribir el píxel convertido en el archivo de salida
            unsigned char gris_pixel[3] = {gris, gris, gris};
            fwrite(gris_pixel, 3, 1, output_file);
        }

        // Saltar el padding en el archivo de entrada
        fseek(input_file, padding, SEEK_CUR);

        // Escribir el padding en el archivo de salida
        unsigned char padding_bytes[3] = {0, 0, 0};
        fwrite(padding_bytes, padding, 1, output_file);
    }

    // Cerrar los archivos
    fclose(input_file);
    fclose(output_file);

    printf("La imagen se convirtió a escala de grises y se guardó en: %s\n", output_filename);
}

int main() {
    const char *archivo_entrada = "avion.bmp";
    const char *archivo_salida = "avion_bn.bmp";

    convertirBMPBlancoNegro(archivo_entrada, archivo_salida);

    return 0;
}
